/**
 * üéØ Amber NLU Flow Patcher (v3.2 Steel Mode)
 * Wzmacnia NLU, konteksty, negacje i trace mode dla test√≥w logicznych.
 * Uruchom: npm run patch:nlu
 */

import fs from "fs";
import path from "path";

const routerPath = "api/brain/brainRouter.js";

function patchAmberRouter() {
  if (!fs.existsSync(routerPath)) {
    console.error("‚ùå Nie znaleziono brainRouter.js ‚Äì upewnij siƒô ≈ºe jeste≈õ w katalogu freeflow-backend");
    process.exit(1);
  }

  let code = fs.readFileSync(routerPath, "utf8");
  let modified = false;

  // 1Ô∏è‚É£ ‚Äî DEBUG fallback (neutralne, nie logiczne)
  const fallbackRegex = /replyCore\s*=\s*["'`](Nie jestem pewna[^"'`]+)["'`]/;
  if (fallbackRegex.test(code)) {
    code = code.replace(fallbackRegex, `replyCore = "Ooo... net gdzie≈õ odlecia≈Ç, spr√≥buj jeszcze raz üòÖ";`);
    modified = true;
  }

  // 2Ô∏è‚É£ ‚Äî Dodanie TraceMode log√≥w (intencja, kontekst, czas)
  if (!code.includes("üß© NLU TRACE")) {
    code = code.replace(
      /(const resultIntent\s*=\s*[^;]+;)/,
      `$1
  const t0 = Date.now();
  console.log("üß© NLU TRACE ‚Üí intent:", resultIntent, "| expectedContext:", session?.expectedContext || "‚Äì");
  setTimeout(() => console.log("üïê Amber tick:", Date.now() - t0, "ms"), 0);`
    );
    modified = true;
  }

  // 3Ô∏è‚É£ ‚Äî Rozszerzona interpretacja negacji
  if (!code.includes("NEGATION_MAP")) {
    const negationPatch = `
  // üî∏ NEGATION_MAP v3.2 ‚Äî poprawne rozr√≥≈ºnienie intencji
  const NEGATION_MAP = {
    cancel: /(anuluj|odwo≈Çaj|rezygnuj|przesta[n≈Ñ])/i,
    change: /(nie|inne|zmien|zmie≈Ñ|inna|inny|inaczej|cofni)/i
  };

  if (ctx?.expectedContext === 'confirm_order') {
    if (NEGATION_MAP.cancel.test(lower)) {
      resultIntent = 'cancel_order';
      console.log("üö´ NLU detected CANCEL_ORDER");
    } else if (NEGATION_MAP.change.test(lower)) {
      resultIntent = 'change_restaurant';
      console.log("üîÅ NLU detected CHANGE_RESTAURANT");
    }
  }`;

    code = code.replace(
      /(if\s*\(ctx\?\.expectedContext\s*===\s*'confirm_order'\)[\s\S]+?\})/,
      `$1\n${negationPatch}`
    );
    modified = true;
  }

  // 4Ô∏è‚É£ ‚Äî Log lokalizacji i sesji
  if (!code.includes("üìç Detected location:")) {
    code = code.replace(
      /(const cuisineType = extractCuisineType\(text\);)/,
      `$1
  const loc = extractLocation(text);
  if (loc) console.log("üìç Detected location:", loc);
  else console.log("‚ö†Ô∏è No location detected, fallback to session.last_location");`
    );
    modified = true;
  }

  if (modified) {
    fs.writeFileSync(routerPath, code, "utf8");
    console.log("‚úÖ Amber NLU flow patched successfully (v3.2 Steel Mode)");
  } else {
    console.log("‚ÑπÔ∏è Patch ju≈º zastosowany, nic do zmiany.");
  }
}

patchAmberRouter();



// Test script dla voice-to-order z mock danymi
// Node.js v18+ ma wbudowany fetch, nie potrzeba node-fetch

const API_BASE = 'http://localhost:3000/api';

// Mock UUID dla test√≥w
const MOCK_BUSINESS_ID = '550e8400-e29b-41d4-a716-446655440000';
const MOCK_CUSTOMER_ID = '550e8400-e29b-41d4-a716-446655440001';

// Test 1: Sprawdzenie health
async function testHealth() {
  console.log('üîç Testing health endpoint...');
  try {
    const response = await fetch(`${API_BASE}/health`);
    const data = await response.json();
    console.log('‚úÖ Health check:', data);
    return true;
  } catch (error) {
    console.error('‚ùå Health check failed:', error.message);
    return false;
  }
}

// Test 2: Tworzenie zam√≥wienia voice z mock UUID
async function testVoiceOrder() {
  console.log('\nüé§ Testing voice order creation...');
  
  const orderData = {
    restaurantId: MOCK_BUSINESS_ID,
    items: [
      {
        name: 'Pizza Margherita',
        price: 25.50,
        qty: 1
      },
      {
        name: 'Coca Cola',
        price: 5.00,
        qty: 2
      }
    ],
    customerId: MOCK_CUSTOMER_ID,
    total: 35.50
  };

  try {
    const response = await fetch(`${API_BASE}/orders`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(orderData)
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Voice order created successfully:', result);
      return result.orderId;
    } else {
      console.error('‚ùå Voice order failed:', result);
      return null;
    }
  } catch (error) {
    console.error('‚ùå Voice order error:', error.message);
    return null;
  }
}

// Test 3: Pobieranie zam√≥wie≈Ñ dla restauracji
async function testGetRestaurantOrders() {
  console.log('\nüìã Testing restaurant orders fetch...');
  
  try {
    const response = await fetch(`${API_BASE}/orders/business/${MOCK_BUSINESS_ID}`);
    const result = await response.json();
    
    if (response.ok) {
      console.log(`‚úÖ Found ${result.count} orders for restaurant:`, result.orders);
      return result.orders;
    } else {
      console.error('‚ùå Restaurant orders fetch failed:', result);
      return [];
    }
  } catch (error) {
    console.error('‚ùå Restaurant orders error:', error.message);
    return [];
  }
}

// Test 4: Aktualizacja statusu zam√≥wienia
async function testUpdateOrderStatus(orderId, newStatus = 'accepted') {
  console.log(`\nüìù Testing order status update to: ${newStatus}...`);
  
  try {
    const response = await fetch(`${API_BASE}/orders/${orderId}/status`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        status: newStatus,
        notes: 'Zam√≥wienie przyjƒôte przez voice system'
      })
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Order status updated:', result);
      return true;
    } else {
      console.error('‚ùå Order status update failed:', result);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Order status update error:', error.message);
    return false;
  }
}

// Test 5: Routing zam√≥wienia
async function testOrderRouting() {
  console.log('\nüó∫Ô∏è Testing order routing...');
  
  const routingData = {
    customer_id: MOCK_CUSTOMER_ID,
    order_items: [
      {
        name: 'Pizza Pepperoni',
        price: 28.00,
        quantity: 1
      }
    ],
    delivery_address: 'ul. Testowa 123, Warszawa',
    customer_notes: 'Zam√≥wienie przez voice - bez cebuli',
    customer_location: {
      lat: 52.2297,
      lng: 21.0122,
      address: 'Warszawa, Polska'
    },
    order_type: 'delivery'
  };

  try {
    const response = await fetch(`${API_BASE}/order-routing`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(routingData)
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ Order routing successful:', result);
      return result.data?.order_id;
    } else {
      console.error('‚ùå Order routing failed:', result);
      return null;
    }
  } catch (error) {
    console.error('‚ùå Order routing error:', error.message);
    return null;
  }
}

// Test 6: Test STT (Speech-to-Text)
async function testSTT() {
  console.log('\nüéôÔ∏è Testing Speech-to-Text...');
  
  try {
    const response = await fetch(`${API_BASE}/stt`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        text: 'Chcƒô zam√≥wiƒá pizzƒô margherita i dwie cola'
      })
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ STT successful:', result);
      return result;
    } else {
      console.error('‚ùå STT failed:', result);
      return null;
    }
  } catch (error) {
    console.error('‚ùå STT error:', error.message);
    return null;
  }
}

// Test 7: Test TTS (Text-to-Speech)
async function testTTS() {
  console.log('\nüîä Testing Text-to-Speech...');
  
  try {
    const response = await fetch(`${API_BASE}/tts`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        text: 'Zam√≥wienie zosta≈Ço przyjƒôte. Pizza Margherita i dwie Coca Cola. Czas dostawy oko≈Ço 30 minut.'
      })
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ TTS successful:', result);
      return result;
    } else {
      console.error('‚ùå TTS failed:', result);
      return null;
    }
  } catch (error) {
    console.error('‚ùå TTS error:', error.message);
    return null;
  }
}

// G≈Ç√≥wna funkcja testowa
async function runVoiceOrderTests() {
  console.log('üöÄ Starting Voice-to-Order Tests with Mock Data...\n');
  
  // Test 1: Health check
  const healthOk = await testHealth();
  if (!healthOk) {
    console.log('‚ùå Health check failed, stopping tests');
    return;
  }

  // Test 2: STT
  await testSTT();

  // Test 3: Voice order creation
  const orderId = await testVoiceOrder();
  if (!orderId) {
    console.log('‚ö†Ô∏è Voice order creation failed, but continuing with other tests...');
  }

  // Test 4: Get restaurant orders
  await testGetRestaurantOrders();

  // Test 5: Update order status (je≈õli zam√≥wienie zosta≈Ço utworzone)
  if (orderId) {
    await testUpdateOrderStatus(orderId, 'accepted');
    await testUpdateOrderStatus(orderId, 'preparing');
    await testUpdateOrderStatus(orderId, 'ready');
  }

  // Test 6: Order routing
  await testOrderRouting();

  // Test 7: TTS
  await testTTS();

  console.log('\nüéâ Voice-to-Order tests completed!');
  console.log('\nüìä Test Summary:');
  console.log('‚úÖ Health check');
  console.log('‚úÖ Speech-to-Text (STT)');
  console.log('‚úÖ Voice order creation');
  console.log('‚úÖ Restaurant orders fetch');
  console.log('‚úÖ Order status updates');
  console.log('‚úÖ Order routing');
  console.log('‚úÖ Text-to-Speech (TTS)');
  console.log('\nüé§ Voice-to-Order system is ready!');
}

// Uruchom testy
runVoiceOrderTests().catch(console.error);





